package sbnz.integracija.rules;

import better.me.enums.*;
import better.me.model.*;
import better.me.dto.*;
import better.me.modelDB.*;
import better.me.util.*;

global MyLogger myLogger;

rule "Calculate calories for created meal"
	agenda-group "new-meal"
	no-loop
    when
    	$meal: Meal(calories == 0, $ingredients: ingredients)
        Number( $value: doubleValue)  from accumulate ( 
			Ingredient($grams: grams, $grocery: grocery) from $ingredients,
			sum(($grocery.getCalories() * $grams) / 100)
		)
    then
        myLogger.log("Calculated calories for created meal: " + $value);
        modify ($meal) {setCalories($value);}
end

rule "Calculate fats for created meal"
	agenda-group "new-meal"
	no-loop
    when
    	$meal: Meal(fats == 0, $ingredients: ingredients)
        Number( $value: doubleValue) from accumulate ( 
			Ingredient($grams: grams, $grocery: grocery) from $ingredients,
			sum(($grocery.getFats() * $grams) / 100)
		)
    then
        myLogger.log("Calculated fats for created meal: " + $value);
        modify ($meal) {setFats($value);}
end

rule "Calculate proteins for created meal"
	agenda-group "new-meal"
	no-loop
    when
    	$meal: Meal(proteins == 0, $ingredients: ingredients)
        Number( $value: doubleValue) from accumulate ( 
			Ingredient($grams: grams, $grocery: grocery) from $ingredients,
			sum(($grocery.getProteins() * $grams) / 100)
		)
    then
        myLogger.log("Calculated proteins for created meal: " + $value);
        modify ($meal) {setProteins($value);}
end

rule "Calculate carbs for created meal"
	agenda-group "new-meal"
	no-loop
    when
    	$meal: Meal(carbs == 0, $ingredients: ingredients)
        Number( $value: doubleValue) from accumulate ( 
			Ingredient($grams: grams, $grocery: grocery) from $ingredients,
			sum(($grocery.getCarbs() * $grams) / 100)
		)
    then
        myLogger.log("Calculated carbs for created meal: " + $value);
        modify ($meal) {setCarbs($value);}
end