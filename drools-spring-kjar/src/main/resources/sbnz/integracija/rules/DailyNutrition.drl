package sbnz.integracija.rules;

import better.me.enums.*;
import better.me.model.*;
import better.me.dto.*;
import better.me.modelDB.*;
import better.me.util.*;

global MyLogger myLogger;


rule "Number of submitted days"
	agenda-group "daily-nutrition"
	no-loop
    when
    	$user: RegisteredUser($id: id)
    	$week: Week($days: days, userId == $id)
        $nutrition: DailyNutrition(day == 0)
        $value: Number(intValue >= 0) from accumulate (
        	Day($t:this, submitted == true) from $days,
        	count($t)
        )
    then
        myLogger.log("Number of submitted days determined");
        modify ($nutrition) {setDay($value.intValue());}
end

rule "Calculate entered daily calories"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: Day($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMeal($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getCalories())/100)
		 )
		 accumulate(
		 	ConcreteMeal($ingredients: ingredients, customMeal == true) from $meals
		 	and Ingredient($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getCalories())/100)
		 )
		 $nutrition: DailyNutrition()
	then
		myLogger.log("Daily calories calculated");
		modify ( $dayHistory ) { setCalories($totalNotCustom + $totalCustom); }
		modify ( $nutrition ) { setCalories($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily fats"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: Day($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMeal($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getFats())/100)
		 )
		 accumulate(
		 	ConcreteMeal($ingredients: ingredients, customMeal == true) from $meals
		 	and Ingredient($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getFats())/100)
		 )
		 $nutrition: DailyNutrition()
	then
		myLogger.log("Daily fats calculated");
		modify ( $dayHistory ) { setFats($totalNotCustom + $totalCustom); }
		modify ( $nutrition ) { setFats($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily carbs"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: Day($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMeal($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getCarbs())/100)
		 )
		 accumulate(
		 	ConcreteMeal($ingredients: ingredients, customMeal == true) from $meals
		 	and Ingredient($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getCarbs())/100)
		 )
		 $nutrition: DailyNutrition()
	then
		myLogger.log("Daily carbs calculated");
		modify ( $dayHistory ) { setCarbs($totalNotCustom + $totalCustom); }
		modify ( $nutrition ) { setCarbs($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily proteins"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: Day($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMeal($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getProteins())/100)
		 )
		 accumulate(
		 	ConcreteMeal($ingredients: ingredients, customMeal == true) from $meals
		 	and Ingredient($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getProteins())/100)
		 )
		 $nutrition: DailyNutrition()
	then
		myLogger.log("Daily proteins calculated");
		modify ( $dayHistory ) { setProteins($totalNotCustom + $totalCustom); }
		modify ( $nutrition ) { setProteins($totalNotCustom + $totalCustom); }		
end

rule "Notification Warning"
	salience -Integer.MAX_VALUE
	agenda-group "daily-nutrition"
	no-loop
	when
		$user: RegisteredUser($id: id)
		$week: Week(userId == $id, $goalCalories: goalCalories)
		$day: Day(calories > $goalCalories)
		$notification: Notification()
	then
		myLogger.log("Notification Warning");
		modify ( $notification ) { setMessage("You exceeded goal calories for today!" ); }
		modify ( $day ) { setExceed(true); }
end

rule "Notification on calories left"
	salience -Integer.MAX_VALUE
	agenda-group "daily-nutrition"
	no-loop
	when
		$user: RegisteredUser($id: id)
		$week: Week(userId == $id, $goalCalories: goalCalories)
		$day: Day(calories < $goalCalories, $calories: calories)
		$notification: Notification()
	then
		myLogger.log("Notification on calories left");
		modify ( $notification ) { setMessage("Calories left: " + ($goalCalories - $calories) ); }
		modify ( $day ) { setExceed(false); }
end