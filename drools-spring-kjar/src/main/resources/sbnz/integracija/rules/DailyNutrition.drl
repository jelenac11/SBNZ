package sbnz.integracija.rules;

import better.me.enums.*;
import better.me.model.*;
import better.me.dto.*;
import better.me.facts.*;
import better.me.util.*;

global MyLogger myLogger;


rule "Number of submitted days"
	agenda-group "daily-nutrition"
	no-loop
    when
    	$user: RegisteredUserFact($id: id)
    	$week: WeekFact($days: days, userId == $id)
        $nutrition: DailyNutritionFact(day == 0)
        $value: Number(intValue >= 0) from accumulate (
        	DayFact($t:this, submitted == true) from $days,
        	count($t)
        )
    then
        myLogger.log("Number of submitted days determined");
        modify ($nutrition) {setDay($value.intValue());}
end

rule "Calculate entered daily calories"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: DayFact($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMealFact($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getCalories())/100)
		 )
		 accumulate(
		 	ConcreteMealFact($ingredients: ingredients, customMeal == true) from $meals
		 	and IngredientFact($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getCalories())/100)
		 )
		 $nutrition: DailyNutritionFact()
	then
		myLogger.log("Daily calories calculated");
		modify ( $nutrition ) { setCalories($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily fats"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: DayFact($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMealFact($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getFats())/100)
		 )
		 accumulate(
		 	ConcreteMealFact($ingredients: ingredients, customMeal == true) from $meals
		 	and IngredientFact($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getFats())/100)
		 )
		 $nutrition: DailyNutritionFact()
	then
		myLogger.log("Daily fats calculated");
		modify ( $nutrition ) { setFats($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily carbs"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: DayFact($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMealFact($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getCarbs())/100)
		 )
		 accumulate(
		 	ConcreteMealFact($ingredients: ingredients, customMeal == true) from $meals
		 	and IngredientFact($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getCarbs())/100)
		 )
		 $nutrition: DailyNutritionFact()
	then
		myLogger.log("Daily carbs calculated");
		modify ( $nutrition ) { setCarbs($totalNotCustom + $totalCustom); }		
end

rule "Calculate entered daily proteins"
	agenda-group "daily-nutrition"
	no-loop
	when 
		$dayHistory: DayFact($meals: concreteMeals, submitted == false)
		accumulate(
		 	ConcreteMealFact($grams: grams, $meal: meal, customMeal == false) from $meals,
		 	$totalNotCustom: sum(($grams * $meal.getProteins())/100)
		 )
		 accumulate(
		 	ConcreteMealFact($ingredients: ingredients, customMeal == true) from $meals
		 	and IngredientFact($quantity: grams, $grocery: grocery) from $ingredients,
		 	$totalCustom: sum(($quantity * $grocery.getProteins())/100)
		 )
		 $nutrition: DailyNutritionFact()
	then
		myLogger.log("Daily proteins calculated");
		modify ( $nutrition ) { setProteins($totalNotCustom + $totalCustom); }		
end